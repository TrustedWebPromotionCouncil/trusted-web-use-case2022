/* tslint:disable */
/* eslint-disable */
/**
 * bunsin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthToken,
    AuthTokenFromJSON,
    AuthTokenToJSON,
    BadRequest,
    BadRequestFromJSON,
    BadRequestToJSON,
    ConfirmRegistration,
    ConfirmRegistrationFromJSON,
    ConfirmRegistrationToJSON,
    ConflictException,
    ConflictExceptionFromJSON,
    ConflictExceptionToJSON,
    EmailAlreadyConfirmedException,
    EmailAlreadyConfirmedExceptionFromJSON,
    EmailAlreadyConfirmedExceptionToJSON,
    ExpiredCodeException,
    ExpiredCodeExceptionFromJSON,
    ExpiredCodeExceptionToJSON,
    InternalServerError,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    InvalidCodeException,
    InvalidCodeExceptionFromJSON,
    InvalidCodeExceptionToJSON,
    RequestRegistration,
    RequestRegistrationFromJSON,
    RequestRegistrationToJSON,
} from '../models';

export interface ConfirmEmailForRegistrationRequest {
    confirmRegistration: ConfirmRegistration;
}

export interface RequestRegistrationRequest {
    requestRegistration: RequestRegistration;
}

/**
 * 
 */
export class RegistrationApi extends runtime.BaseAPI {

    /**
     * confirm a email.
     */
    async confirmEmailForRegistrationRaw(requestParameters: ConfirmEmailForRegistrationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AuthToken>> {
        if (requestParameters.confirmRegistration === null || requestParameters.confirmRegistration === undefined) {
            throw new runtime.RequiredError('confirmRegistration','Required parameter requestParameters.confirmRegistration was null or undefined when calling confirmEmailForRegistration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/registration/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmRegistrationToJSON(requestParameters.confirmRegistration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenFromJSON(jsonValue));
    }

    /**
     * confirm a email.
     */
    async confirmEmailForRegistration(requestParameters: ConfirmEmailForRegistrationRequest, initOverrides?: RequestInit): Promise<AuthToken> {
        const response = await this.confirmEmailForRegistrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * request registration
     */
    async requestRegistrationRaw(requestParameters: RequestRegistrationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestRegistration === null || requestParameters.requestRegistration === undefined) {
            throw new runtime.RequiredError('requestRegistration','Required parameter requestParameters.requestRegistration was null or undefined when calling requestRegistration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/registration/request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestRegistrationToJSON(requestParameters.requestRegistration),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * request registration
     */
    async requestRegistration(requestParameters: RequestRegistrationRequest, initOverrides?: RequestInit): Promise<void> {
        await this.requestRegistrationRaw(requestParameters, initOverrides);
    }

}
