/* tslint:disable */
/* eslint-disable */
/**
 * bunsin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AlreadyInvitedException,
    AlreadyInvitedExceptionFromJSON,
    AlreadyInvitedExceptionToJSON,
    InternalServerError,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    Invitation,
    InvitationFromJSON,
    InvitationToJSON,
    InvitationInfo,
    InvitationInfoFromJSON,
    InvitationInfoToJSON,
    InvitationReachedMaxCountException,
    InvitationReachedMaxCountExceptionFromJSON,
    InvitationReachedMaxCountExceptionToJSON,
    InviteAlterEgoEmailException,
    InviteAlterEgoEmailExceptionFromJSON,
    InviteAlterEgoEmailExceptionToJSON,
    SelfInvitationException,
    SelfInvitationExceptionFromJSON,
    SelfInvitationExceptionToJSON,
    UnauthorizedError,
    UnauthorizedErrorFromJSON,
    UnauthorizedErrorToJSON,
} from '../models';

export interface CreateInvitationRequest {
    invitation: Invitation;
}

/**
 * 
 */
export class InvitationApi extends runtime.BaseAPI {

    /**
     * Invite a new user by specifying a email address
     * create invitation
     */
    async createInvitationRaw(requestParameters: CreateInvitationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.invitation === null || requestParameters.invitation === undefined) {
            throw new runtime.RequiredError('invitation','Required parameter requestParameters.invitation was null or undefined when calling createInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/invitations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvitationToJSON(requestParameters.invitation),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Invite a new user by specifying a email address
     * create invitation
     */
    async createInvitation(requestParameters: CreateInvitationRequest, initOverrides?: RequestInit): Promise<void> {
        await this.createInvitationRaw(requestParameters, initOverrides);
    }

    /**
     * get already invitation list
     * get invitation
     */
    async getInvitationRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<InvitationInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/invitations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationInfoFromJSON(jsonValue));
    }

    /**
     * get already invitation list
     * get invitation
     */
    async getInvitation(initOverrides?: RequestInit): Promise<InvitationInfo> {
        const response = await this.getInvitationRaw(initOverrides);
        return await response.value();
    }

}
