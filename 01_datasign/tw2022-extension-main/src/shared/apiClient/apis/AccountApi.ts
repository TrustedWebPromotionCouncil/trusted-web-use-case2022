/* tslint:disable */
/* eslint-disable */
/**
 * bunsin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountLockedOutException,
    AccountLockedOutExceptionFromJSON,
    AccountLockedOutExceptionToJSON,
    BadRequest,
    BadRequestFromJSON,
    BadRequestToJSON,
    ConfirmEmail,
    ConfirmEmailFromJSON,
    ConfirmEmailToJSON,
    ConflictException,
    ConflictExceptionFromJSON,
    ConflictExceptionToJSON,
    EmailAlreadyConfirmedException,
    EmailAlreadyConfirmedExceptionFromJSON,
    EmailAlreadyConfirmedExceptionToJSON,
    ExpiredCodeException,
    ExpiredCodeExceptionFromJSON,
    ExpiredCodeExceptionToJSON,
    InternalServerError,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    InvalidCodeException,
    InvalidCodeExceptionFromJSON,
    InvalidCodeExceptionToJSON,
    Me,
    MeFromJSON,
    MeToJSON,
    OptOutStatus,
    OptOutStatusFromJSON,
    OptOutStatusToJSON,
    RequestAddEmail,
    RequestAddEmailFromJSON,
    RequestAddEmailToJSON,
    RequestChangeEmail,
    RequestChangeEmailFromJSON,
    RequestChangeEmailToJSON,
    RequestDeleteEmail,
    RequestDeleteEmailFromJSON,
    RequestDeleteEmailToJSON,
    UnauthorizedError,
    UnauthorizedErrorFromJSON,
    UnauthorizedErrorToJSON,
} from '../models';

export interface ConfirmEmailRequest {
    confirmEmail: ConfirmEmail;
}

export interface ReqeustEmailAdditionRequest {
    requestAddEmail: RequestAddEmail;
}

export interface ReqeustEmailChangeRequest {
    requestChangeEmail: RequestChangeEmail;
}

export interface ReqeustEmailDeletionRequest {
    requestDeleteEmail: RequestDeleteEmail;
}

export interface UpdateOptoutStatusRequest {
    optOutStatus: OptOutStatus;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * confirm email
     */
    async confirmEmailRaw(requestParameters: ConfirmEmailRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.confirmEmail === null || requestParameters.confirmEmail === undefined) {
            throw new runtime.RequiredError('confirmEmail','Required parameter requestParameters.confirmEmail was null or undefined when calling confirmEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/email/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmEmailToJSON(requestParameters.confirmEmail),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * confirm email
     */
    async confirmEmail(requestParameters: ConfirmEmailRequest, initOverrides?: RequestInit): Promise<void> {
        await this.confirmEmailRaw(requestParameters, initOverrides);
    }

    /**
     * delete user data
     */
    async deleteUserRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete user data
     */
    async deleteUser(initOverrides?: RequestInit): Promise<void> {
        await this.deleteUserRaw(initOverrides);
    }

    /**
     * get me data
     */
    async getMeRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Me>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeFromJSON(jsonValue));
    }

    /**
     * get me data
     */
    async getMe(initOverrides?: RequestInit): Promise<Me> {
        const response = await this.getMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * get opt out setting
     */
    async getOptoutStatusRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<OptOutStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/opt-out`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptOutStatusFromJSON(jsonValue));
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * get opt out setting
     */
    async getOptoutStatus(initOverrides?: RequestInit): Promise<OptOutStatus> {
        const response = await this.getOptoutStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * request email addition
     */
    async reqeustEmailAdditionRaw(requestParameters: ReqeustEmailAdditionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestAddEmail === null || requestParameters.requestAddEmail === undefined) {
            throw new runtime.RequiredError('requestAddEmail','Required parameter requestParameters.requestAddEmail was null or undefined when calling reqeustEmailAddition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/email/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestAddEmailToJSON(requestParameters.requestAddEmail),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * request email addition
     */
    async reqeustEmailAddition(requestParameters: ReqeustEmailAdditionRequest, initOverrides?: RequestInit): Promise<void> {
        await this.reqeustEmailAdditionRaw(requestParameters, initOverrides);
    }

    /**
     * request email change
     */
    async reqeustEmailChangeRaw(requestParameters: ReqeustEmailChangeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestChangeEmail === null || requestParameters.requestChangeEmail === undefined) {
            throw new runtime.RequiredError('requestChangeEmail','Required parameter requestParameters.requestChangeEmail was null or undefined when calling reqeustEmailChange.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/email/change`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestChangeEmailToJSON(requestParameters.requestChangeEmail),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * request email change
     */
    async reqeustEmailChange(requestParameters: ReqeustEmailChangeRequest, initOverrides?: RequestInit): Promise<void> {
        await this.reqeustEmailChangeRaw(requestParameters, initOverrides);
    }

    /**
     * request email deletion
     */
    async reqeustEmailDeletionRaw(requestParameters: ReqeustEmailDeletionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestDeleteEmail === null || requestParameters.requestDeleteEmail === undefined) {
            throw new runtime.RequiredError('requestDeleteEmail','Required parameter requestParameters.requestDeleteEmail was null or undefined when calling reqeustEmailDeletion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/email/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RequestDeleteEmailToJSON(requestParameters.requestDeleteEmail),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * request email deletion
     */
    async reqeustEmailDeletion(requestParameters: ReqeustEmailDeletionRequest, initOverrides?: RequestInit): Promise<void> {
        await this.reqeustEmailDeletionRaw(requestParameters, initOverrides);
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * update opt out setting
     */
    async updateOptoutStatusRaw(requestParameters: UpdateOptoutStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OptOutStatus>> {
        if (requestParameters.optOutStatus === null || requestParameters.optOutStatus === undefined) {
            throw new runtime.RequiredError('optOutStatus','Required parameter requestParameters.optOutStatus was null or undefined when calling updateOptoutStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/opt-out`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OptOutStatusToJSON(requestParameters.optOutStatus),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptOutStatusFromJSON(jsonValue));
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * update opt out setting
     */
    async updateOptoutStatus(requestParameters: UpdateOptoutStatusRequest, initOverrides?: RequestInit): Promise<OptOutStatus> {
        const response = await this.updateOptoutStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
