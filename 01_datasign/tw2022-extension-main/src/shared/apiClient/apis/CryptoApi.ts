/* tslint:disable */
/* eslint-disable */
/**
 * bunsin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BadRequest,
    BadRequestFromJSON,
    BadRequestToJSON,
    DecryptedEmail,
    DecryptedEmailFromJSON,
    DecryptedEmailToJSON,
    EncryptedEmail,
    EncryptedEmailFromJSON,
    EncryptedEmailToJSON,
    InternalServerError,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
} from '../models';

export interface DecryptEmailRequest {
    encryptedEmail: EncryptedEmail;
}

/**
 * 
 */
export class CryptoApi extends runtime.BaseAPI {

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * decrypt email
     */
    async decryptEmailRaw(requestParameters: DecryptEmailRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DecryptedEmail>> {
        if (requestParameters.encryptedEmail === null || requestParameters.encryptedEmail === undefined) {
            throw new runtime.RequiredError('encryptedEmail','Required parameter requestParameters.encryptedEmail was null or undefined when calling decryptEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/email/decrypt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EncryptedEmailToJSON(requestParameters.encryptedEmail),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DecryptedEmailFromJSON(jsonValue));
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * decrypt email
     */
    async decryptEmail(requestParameters: DecryptEmailRequest, initOverrides?: RequestInit): Promise<DecryptedEmail> {
        const response = await this.decryptEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
