/* tslint:disable */
/* eslint-disable */
/**
 * bunsin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AlreadyForwardedException,
    AlreadyForwardedExceptionFromJSON,
    AlreadyForwardedExceptionToJSON,
    AlterEgo,
    AlterEgoFromJSON,
    AlterEgoToJSON,
    AlterEgoBlockedDomain,
    AlterEgoBlockedDomainFromJSON,
    AlterEgoBlockedDomainToJSON,
    AlterEgoMailAddressReachedMaxCountException,
    AlterEgoMailAddressReachedMaxCountExceptionFromJSON,
    AlterEgoMailAddressReachedMaxCountExceptionToJSON,
    AlterEgoMailStatus,
    AlterEgoMailStatusFromJSON,
    AlterEgoMailStatusToJSON,
    BadRequest,
    BadRequestFromJSON,
    BadRequestToJSON,
    ConflictException,
    ConflictExceptionFromJSON,
    ConflictExceptionToJSON,
    InternalServerError,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    ResourceNotFoundException,
    ResourceNotFoundExceptionFromJSON,
    ResourceNotFoundExceptionToJSON,
    UnauthorizedError,
    UnauthorizedErrorFromJSON,
    UnauthorizedErrorToJSON,
} from '../models';

export interface CreateAlterEgoRequest {
    alterEgo: AlterEgo;
}

export interface DeleteAlterEgoRequest {
    id: number;
}

export interface DeleteAlterEgoBlockDomainRequest {
    id: number;
    domainId: number;
}

export interface GetAlterEgoRequest {
    id: number;
}

export interface GetAlterEgoBlockDomainRequest {
    id: number;
}

export interface GetAlterEgoMailRequest {
    id: number;
}

export interface PostAlterEgoBlockAllDomainRequest {
    id: number;
}

export interface PostAlterEgoBlockDomainRequest {
    id: number;
    alterEgoBlockedDomain: AlterEgoBlockedDomain;
}

export interface PostAlterEgoUnblockAllDomainRequest {
    id: number;
}

export interface PostForwardReceivedMailRequest {
    id: number;
    receiveEmailId: number;
}

export interface UpdateAlterEgoRequest {
    id: number;
    alterEgo: AlterEgo;
}

/**
 * 
 */
export class AlterEgosApi extends runtime.BaseAPI {

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * create alter egos data
     */
    async createAlterEgoRaw(requestParameters: CreateAlterEgoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AlterEgo>> {
        if (requestParameters.alterEgo === null || requestParameters.alterEgo === undefined) {
            throw new runtime.RequiredError('alterEgo','Required parameter requestParameters.alterEgo was null or undefined when calling createAlterEgo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/alter-egos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlterEgoToJSON(requestParameters.alterEgo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlterEgoFromJSON(jsonValue));
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * create alter egos data
     */
    async createAlterEgo(requestParameters: CreateAlterEgoRequest, initOverrides?: RequestInit): Promise<AlterEgo> {
        const response = await this.createAlterEgoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * delete alter egos data
     */
    async deleteAlterEgoRaw(requestParameters: DeleteAlterEgoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAlterEgo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/alter-egos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * delete alter egos data
     */
    async deleteAlterEgo(requestParameters: DeleteAlterEgoRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteAlterEgoRaw(requestParameters, initOverrides);
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * delete alter egos blocked domain by domain id
     */
    async deleteAlterEgoBlockDomainRaw(requestParameters: DeleteAlterEgoBlockDomainRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAlterEgoBlockDomain.');
        }

        if (requestParameters.domainId === null || requestParameters.domainId === undefined) {
            throw new runtime.RequiredError('domainId','Required parameter requestParameters.domainId was null or undefined when calling deleteAlterEgoBlockDomain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/alter-egos/{id}/blocked-domains/{domain_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"domain_id"}}`, encodeURIComponent(String(requestParameters.domainId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * delete alter egos blocked domain by domain id
     */
    async deleteAlterEgoBlockDomain(requestParameters: DeleteAlterEgoBlockDomainRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteAlterEgoBlockDomainRaw(requestParameters, initOverrides);
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * get alter egos data
     */
    async getAlterEgoRaw(requestParameters: GetAlterEgoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AlterEgo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAlterEgo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/alter-egos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlterEgoFromJSON(jsonValue));
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * get alter egos data
     */
    async getAlterEgo(requestParameters: GetAlterEgoRequest, initOverrides?: RequestInit): Promise<AlterEgo> {
        const response = await this.getAlterEgoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * get alter ego blocked domains
     */
    async getAlterEgoBlockDomainRaw(requestParameters: GetAlterEgoBlockDomainRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AlterEgoBlockedDomain>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAlterEgoBlockDomain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/alter-egos/{id}/blocked-domains`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlterEgoBlockedDomainFromJSON));
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * get alter ego blocked domains
     */
    async getAlterEgoBlockDomain(requestParameters: GetAlterEgoBlockDomainRequest, initOverrides?: RequestInit): Promise<Array<AlterEgoBlockedDomain>> {
        const response = await this.getAlterEgoBlockDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * get alter egos mail info data
     */
    async getAlterEgoMailRaw(requestParameters: GetAlterEgoMailRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AlterEgoMailStatus>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAlterEgoMail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/alter-egos/{id}/receive-emails`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlterEgoMailStatusFromJSON));
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * get alter egos mail info data
     */
    async getAlterEgoMail(requestParameters: GetAlterEgoMailRequest, initOverrides?: RequestInit): Promise<Array<AlterEgoMailStatus>> {
        const response = await this.getAlterEgoMailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * get alter egos list
     */
    async getAlterEgosRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AlterEgo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/alter-egos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlterEgoFromJSON));
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * get alter egos list
     */
    async getAlterEgos(initOverrides?: RequestInit): Promise<Array<AlterEgo>> {
        const response = await this.getAlterEgosRaw(initOverrides);
        return await response.value();
    }

    /**
     * Block all alter ego mail
     */
    async postAlterEgoBlockAllDomainRaw(requestParameters: PostAlterEgoBlockAllDomainRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postAlterEgoBlockAllDomain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/alter-egos/{id}/block-all-domains`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Block all alter ego mail
     */
    async postAlterEgoBlockAllDomain(requestParameters: PostAlterEgoBlockAllDomainRequest, initOverrides?: RequestInit): Promise<void> {
        await this.postAlterEgoBlockAllDomainRaw(requestParameters, initOverrides);
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * add alter ego blocked domain
     */
    async postAlterEgoBlockDomainRaw(requestParameters: PostAlterEgoBlockDomainRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AlterEgoBlockedDomain>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postAlterEgoBlockDomain.');
        }

        if (requestParameters.alterEgoBlockedDomain === null || requestParameters.alterEgoBlockedDomain === undefined) {
            throw new runtime.RequiredError('alterEgoBlockedDomain','Required parameter requestParameters.alterEgoBlockedDomain was null or undefined when calling postAlterEgoBlockDomain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/alter-egos/{id}/blocked-domains`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlterEgoBlockedDomainToJSON(requestParameters.alterEgoBlockedDomain),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlterEgoBlockedDomainFromJSON(jsonValue));
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * add alter ego blocked domain
     */
    async postAlterEgoBlockDomain(requestParameters: PostAlterEgoBlockDomainRequest, initOverrides?: RequestInit): Promise<AlterEgoBlockedDomain> {
        const response = await this.postAlterEgoBlockDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unblock all alter ego mail
     */
    async postAlterEgoUnblockAllDomainRaw(requestParameters: PostAlterEgoUnblockAllDomainRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postAlterEgoUnblockAllDomain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/alter-egos/{id}/unblock-all-domains`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unblock all alter ego mail
     */
    async postAlterEgoUnblockAllDomain(requestParameters: PostAlterEgoUnblockAllDomainRequest, initOverrides?: RequestInit): Promise<void> {
        await this.postAlterEgoUnblockAllDomainRaw(requestParameters, initOverrides);
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * Forward blocked email
     */
    async postForwardReceivedMailRaw(requestParameters: PostForwardReceivedMailRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postForwardReceivedMail.');
        }

        if (requestParameters.receiveEmailId === null || requestParameters.receiveEmailId === undefined) {
            throw new runtime.RequiredError('receiveEmailId','Required parameter requestParameters.receiveEmailId was null or undefined when calling postForwardReceivedMail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/alter-egos/{id}/receive-emails/{receive_email_id}/forward`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"receive_email_id"}}`, encodeURIComponent(String(requestParameters.receiveEmailId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * Forward blocked email
     */
    async postForwardReceivedMail(requestParameters: PostForwardReceivedMailRequest, initOverrides?: RequestInit): Promise<void> {
        await this.postForwardReceivedMailRaw(requestParameters, initOverrides);
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * update alter egos data
     */
    async updateAlterEgoRaw(requestParameters: UpdateAlterEgoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AlterEgo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAlterEgo.');
        }

        if (requestParameters.alterEgo === null || requestParameters.alterEgo === undefined) {
            throw new runtime.RequiredError('alterEgo','Required parameter requestParameters.alterEgo was null or undefined when calling updateAlterEgo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me/alter-egos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AlterEgoToJSON(requestParameters.alterEgo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlterEgoFromJSON(jsonValue));
    }

    /**
     * https://openid-foundation-japan.github.io/rfc7009.ja.html
     * update alter egos data
     */
    async updateAlterEgo(requestParameters: UpdateAlterEgoRequest, initOverrides?: RequestInit): Promise<AlterEgo> {
        const response = await this.updateAlterEgoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
